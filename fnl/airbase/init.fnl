(local palette (require :airbase.palette))

(macro hl! [name colors ...]
  (let [def (collect [_ v (ipairs [...]) &into colors]
              (tostring v) true)]
    `(vim.api.nvim_set_hl 0 ,name ,def)))

;; Reset all highlighting to the defaults

(when vim.g.colors_name
  (vim.cmd.hi :clear))

;; Set defaults

(tset vim.g :colors_name :airbase)
(tset vim.o :termguicolors true)

;; Built-in highlighting groups

(hl! :ColorColumn    {:bg palette.bg-dim})
(hl! :Conceal        {})
(hl! :CurSearch      {:link "IncSearch"})
(hl! :Cursor         {:bg palette.cursor})
(hl! :CursorColumn   {})
(hl! :CursorIM       {})
(hl! :CursorLine     {:bg palette.bg-hl-line})
(hl! :CursorLineFold {})
(hl! :CursorLineNr   {:bg palette.bg-line-number-active :fg palette.fg-line-number-active} :bold)
(hl! :CursorLineSign {:bg palette.bg-dim})
(hl! :DiffAdd        {:bg palette.bg-added :fg palette.fg-added})
(hl! :DiffChange     {:bg palette.bg-changed :fg palette.fg-changed})
(hl! :DiffDelete     {:bg palette.bg-removed :fg palette.fg-removed})
(hl! :DiffText       {})
(hl! :Directory      {:fg palette.accent-0})
(hl! :EndOfBuffer    {})
(hl! :ErrorMsg       {})
(hl! :FloatBorder    {:fg palette.border})
(hl! :FloatFooter    {})
(hl! :FloatTitle     {})
(hl! :FoldColumn     {})
(hl! :Folded         {})
(hl! :IncSearch      {:bg palette.bg-search-current :fg palette.fg-main})
(hl! :LineNr         {:bg palette.bg-line-number-inactive :fg palette.fg-line-number-inactive})
(hl! :LineNrAbove    {:bg palette.bg-line-number-inactive :fg palette.fg-line-number-inactive})
(hl! :LineNrBelow    {:bg palette.bg-line-number-inactive :fg palette.fg-line-number-inactive})
(hl! :MatchParen     {:bg palette.bg-paren-match :fg palette.fg-paren-match})
(hl! :ModeMsg        {})
(hl! :MoreMsg        {})
(hl! :MsgArea        {})
(hl! :MsgSeparator   {})
(hl! :NonText        {})
(hl! :Normal         {:bg palette.bg-main :fg palette.fg-main})
(hl! :NormalFloat    {:bg palette.bg-dim})
(hl! :NormalNC       {})
(hl! :Pmenu          {:bg palette.bg-dim})
(hl! :PmenuExtra     {:fg "#000000"})
(hl! :PmenuExtraSel  {})
(hl! :PmenuKind      {})
(hl! :PmenuKindSel   {})
(hl! :PmenuSbar      {:bg palette.bg-inactive})
(hl! :PmenuSel       {:bg palette.bg-completion} :bold)
(hl! :PmenuThumb     {:bg palette.fg-dim})
(hl! :Question       {})
(hl! :QuickFixLine   {})
(hl! :Search         {:bg palette.bg-search-lazy :fg palette.fg-main})
(hl! :SignColumn     {:bg palette.bg-dim})
(hl! :SnippetTabstop {})
(hl! :SpecialKey     {})
(hl! :SpellBad       {})
(hl! :SpellCap       {})
(hl! :SpellLocal     {})
(hl! :SpellRare      {})
(hl! :StatusLine     {:bg palette.bg-mode-line-active :fg palette.fg-mode-line-active})
(hl! :StatusLineNC   {:bg palette.bg-mode-line-inactive :fg palette.fg-mode-line-inactive})
(hl! :Substitute     {})
(hl! :TabLine        {:bg palette.bg-tab-other})
(hl! :TabLineFill    {:bg palette.bg-tab-bar})
(hl! :TabLineSel     {:bg palette.bg-tab-current})
(hl! :TermCursor     {})
(hl! :TermCursorNC   {})
(hl! :Title          {})
(hl! :Visual         {:bg palette.bg-region :fg palette.fg-region})
(hl! :VisualNOS      {})
(hl! :WarningMsg     {})
(hl! :Whitespace     {})
(hl! :WildMenu       {})
(hl! :WinBar         {})
(hl! :WinBarNC       {})
(hl! :WinSeparator   {:fg palette.border} :bold)

;; Suggested syntax highlighting groups

(hl! :Boolean        {})
(hl! :Character      {})
(hl! :Comment        {:fg palette.comment})
(hl! :Conditional    {})
(hl! :Constant       {:fg palette.constant})
(hl! :Debug          {})
(hl! :Define         {})
(hl! :Delimiter      {:fg palette.delimiter})
(hl! :Error          {})
(hl! :Exception      {})
(hl! :Float          {})
(hl! :Function       {:fg palette.fnname})
(hl! :Identifier     {:fg palette.variable})
(hl! :Ignore         {})
(hl! :Include        {})
(hl! :Keyword        {:fg palette.keyword} :bold)
(hl! :Label          {})
(hl! :Macro          {})
(hl! :Number         {:fg palette.number})
(hl! :Operator       {:fg palette.operator})
(hl! :PreCondit      {})
(hl! :PreProc        {:fg palette.preprocessor})
(hl! :Repeat         {})
(hl! :Special        {})
(hl! :SpecialChar    {})
(hl! :SpecialComment {})
(hl! :Statement      {})
(hl! :StorageClass   {})
(hl! :String         {:fg palette.string})
(hl! :Structure      {})
(hl! :Tag            {})
(hl! :Todo           {})
(hl! :Type           {:fg palette.type} :bold)
(hl! :Typedef        {})
(hl! :Underlined     {} :underline)

(hl! :Added   {:link :DiffAdd})
(hl! :Changed {:link :DiffChange})
(hl! :Removed {:link :DiffDelete})

;; Tree-sitter highlighting groups

(hl! "@variable"                    {:fg palette.variable})
(hl! "@variable.builtin"            {})
(hl! "@variable.parameter"          {:link "@variable"})
(hl! "@variable.parameter.builtin"  {})
(hl! "@variable.member"             {})
(hl! "@constant"                    {:link "Constant"})
(hl! "@constant.builtin"            {})
(hl! "@constant.macro"              {})
(hl! "@module"                      {:link "Include"})
(hl! "@module.builtin"              {})
(hl! "@label"                       {})
(hl! "@string"                      {:link "String"})
(hl! "@string.documentation"        {})
(hl! "@string.regexp"               {})
(hl! "@string.escape"               {})
(hl! "@string.special"              {})
(hl! "@string.special.symbol"       {})
(hl! "@string.special.path"         {})
(hl! "@string.special.url"          {})
(hl! "@character"                   {:link "Character"})
(hl! "@character.special"           {:link "SpecialChar"})
(hl! "@boolean"                     {:link "Boolean"})
(hl! "@number"                      {:link "Number"})
(hl! "@number.float"                {:link "Float"})
(hl! "@type"                        {:link "Type"})
(hl! "@type.builtin"                {})
(hl! "@type.definition"             {:link "TypeDef"})
(hl! "@attribute"                   {:link "PreProc"})
(hl! "@attribute.builtin"           {})
(hl! "@property"                    {})
(hl! "@function"                    {:link "Function"})
(hl! "@function.builtin"            {:link "Special"})
(hl! "@function.call"               {:link "@function"})
(hl! "@function.macro"              {:link "Macro"})
(hl! "@function.method"             {:link "Function"})
(hl! "@function.method.call"        {:link "@function.method"})
(hl! "@constructor"                 {})
(hl! "@operator"                    {:link "Operator"})
(hl! "@keyword"                     {:link "Keyword"})
(hl! "@keyword.coroutine"           {})
(hl! "@keyword.function"            {})
(hl! "@keyword.operator"            {})
(hl! "@keyword.import"              {})
(hl! "@keyword.type"                {})
(hl! "@keyword.modifier"            {})
(hl! "@keyword.repeat"              {})
(hl! "@keyword.return"              {})
(hl! "@keyword.debug"               {})
(hl! "@keyword.exception"           {:link "Exception"})
(hl! "@keyword.conditional"         {:link "Conditional"})
(hl! "@keyword.conditional.ternary" {})
(hl! "@keyword.directive"           {:link "PreProc"})
(hl! "@keyword.directive.define"    {:link "Define"})
(hl! "@punctuation.delimiter"       {:link "Delimiter"})
(hl! "@punctuation.bracket"         {:fg palette.bracket})
(hl! "@punctuation.special"         {})
(hl! "@comment"                     {:link "Comment"})
(hl! "@comment.documentation"       {})
(hl! "@comment.error"               {})
(hl! "@comment.warning"             {})
(hl! "@comment.todo"                {})
(hl! "@comment.note"                {})
(hl! "@markup.strong"               {} :bold)
(hl! "@markup.italic"               {} :italic)
(hl! "@markup.strikethrough"        {} :strikethrough)
(hl! "@markup.underline"            {} :underline)
(hl! "@markup.heading"              {})
(hl! "@markup.heading.1"            {})
(hl! "@markup.heading.2"            {})
(hl! "@markup.heading.3"            {})
(hl! "@markup.heading.4"            {})
(hl! "@markup.heading.5"            {})
(hl! "@markup.heading.6"            {})
(hl! "@markup.quote"                {})
(hl! "@markup.math"                 {:link "Special"})
(hl! "@markup.link"                 {})
(hl! "@markup.link.label"           {})
(hl! "@markup.link.url"             {})
(hl! "@markup.raw"                  {:link "String"})
(hl! "@markup.raw.block"            {})
(hl! "@markup.list"                 {})
(hl! "@markup.list.checked"         {})
(hl! "@markup.list.unchecked"       {})
(hl! "@diff.plus"                   {:link "DiffAdd"})
(hl! "@diff.minus"                  {:link "DiffDelete"})
(hl! "@diff.delta"                  {:link "DiffChange"})
(hl! "@tag"                         {:link "Label"})
(hl! "@tag.builtin"                 {})
(hl! "@tag.attribute"               {})
(hl! "@tag.delimiter"               {:link "Delimiter"})

;; Diagnostics highlighting groups

(hl! :DiagnosticError          {:fg palette.err})
(hl! :DiagnosticWarn           {:fg palette.warning})
(hl! :DiagnosticInfo           {:fg palette.info})
(hl! :DiagnosticHint           {})
(hl! :DiagnosticOk             {})

(hl! :DiagnosticUnderlineError {:sp palette.underline-err} :undercurl)
(hl! :DiagnosticUnderlineWarn  {:sp palette.underline-warning} :undercurl)
(hl! :DiagnosticUnderlineInfo  {:sp palette.underline-note} :undercurl)
(hl! :DiagnosticUnderlineHint  {})
(hl! :DiagnosticUnderlineOk    {})

(hl! :DiagnosticSignError      {})
(hl! :DiagnosticSignWarn       {})
(hl! :DiagnosticSignInfo       {})
(hl! :DiagnosticSignHint       {})
(hl! :DiagnosticSignOk         {})

(hl! :DiagnosticVirtualTextError {:link :DiagnosticError})
(hl! :DiagnosticVirtualTextWarn  {:link :DiagnosticWarn})
(hl! :DiagnosticVirtualTextInfo  {:link :DiagnosticInfo})
(hl! :DiagnosticVirtualTextHint  {:link :DiagnosticHint})

;; Cmp highlighting groups

(hl! :CmpItemAbbr           {:fg palette.fg-main})
(hl! :CmpItemAbbrDeprecated {:fg palette.fg-main} :strikethrough)
(hl! :CmpItemAbbrMatch      {:fg palette.fg-completion-match-0} :bold)
(hl! :CmpItemAbbrMatchFuzzy {:fg palette.fg-completion-match-0} :bold)
(hl! :CmpItemKindFunction   {:link "Function"})
(hl! :CmpItemKindConstant   {:link "Constant"})
(hl! :CmpItemMenu           {:bg palette.bg-dim :fg palette.fg-main})

{: airbase}
